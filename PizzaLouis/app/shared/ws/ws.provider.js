"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
//import {Router} from "@angular/router";
require("rxjs/add/operator/toPromise");
/**
 * Provider d'acces au webservice du site pizzas
 */
var WSProvider = (function () {
    function WSProvider(_http) {
        //this.getLocation();
        this._http = _http;
        this.auth_token = null; //par defaut, non identifier
        this.pizzas = []; //pour eviter des les recharger a chaque fois 
        this.location = {
            latitude: 43.669070,
            longitude: -1.105356
        };
        this.toolate = false;
        this.SERVER_URL = ""; // "http://192.168.1.16:3000/";//pour les tests
        var now = new Date();
        var end = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 21, 30, 0); //derniere commande 21h30
        this.toolate = now > end; //si true, ne peut plus faire de commande
    }
    WSProvider.prototype.getLocation = function () {
        var _this = this;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (pos) {
                console.log(pos);
                _this.location = {
                    latitude: pos.coords.latitude,
                    longitude: pos.coords.longitude
                };
            });
        }
    };
    WSProvider.prototype.setServerIP = function (ip) {
        this.SERVER_URL = "http://" + ip + ":3000"; //enregistre @DEV ONLY
    };
    WSProvider.prototype.canActivate = function () {
        if (this.isAuthenticate())
            return true;
        //else this._route.navigate(["/login"])
    };
    WSProvider.prototype.setAuthInfos = function (infos) {
        if (infos == null) {
            this.auth_token = null;
            return;
        }
        console.log(infos.token.token);
        this.auth_token = infos.token.token;
    };
    WSProvider.prototype.isAuthenticate = function () { return this.auth_token != null; };
    WSProvider.prototype.login = function (name, password) {
        return this.sendToServer("/api/login", "post", { name: name, password: password });
    };
    WSProvider.prototype.createUser = function (name, email) {
        return this.sendToServer("/api/createuser", "post", { name: name, password: email });
    };
    WSProvider.prototype.loadUserDetails = function () {
        return this.sendGetToServer("/api/client/user");
    };
    WSProvider.prototype.saveUserDetails = function (user) {
        return this.sendToServer("/api/client/user", "post", user);
    };
    WSProvider.prototype.loadLastNewsExcerpt = function (offset) {
        return this.sendGetToServer("/api/client/lastnewsexcerpt?offset=" + offset);
    };
    WSProvider.prototype.loadNews = function (id) {
        return this.sendGetToServer("/api/client/news/" + id);
    };
    WSProvider.prototype.postNewsComment = function (id, msg) {
        return this.sendToServer("/api/client/news/" + id, 'post', { msg: msg });
    };
    WSProvider.prototype.getPizzasList = function () {
        var _this = this;
        if (this.pizzas.length > 0)
            return Promise.resolve(this.pizzas);
        return this.sendGetToServer("/api/client/pizzas").then(function (dt) {
            _this.pizzas = dt;
            return dt;
        });
    };
    WSProvider.prototype.loadPizza = function (id) {
        return this.sendGetToServer("/api/client/pizzas/" + id);
    };
    WSProvider.prototype.postPizzaComment = function (id, msg, note) {
        return this.sendToServer("/api/client/pizzas/" + id, 'post', { msg: msg, note: note });
    };
    //PAYPAL: recupere un token client pour le paiement
    WSProvider.prototype.getClientToken = function () {
        return this.sendGetToServer("/api/client/client_token");
    };
    WSProvider.prototype.getPizzaById = function (id, pizzas) {
        for (var _i = 0, pizzas_1 = pizzas; _i < pizzas_1.length; _i++) {
            var p = pizzas_1[_i];
            console.log(p);
            if (p && p.id == id)
                return p;
        }
    };
    WSProvider.prototype.postCommand = function (payementid, card, date_retrait, message) {
        //renvois les infos de la card       
        var pizzas = this.pizzas;
        var cardarr = [];
        console.log(card);
        for (var _i = 0, _a = card.pizzas; _i < _a.length; _i++) {
            var pizza = _a[_i];
            console.log(pizza);
            var com = {
                id: pizza.pizza.id,
                nom: pizza.pizza.nom,
                small: pizza.small,
                big: pizza.big
            };
            cardarr.push(com);
        }
        //infos autre:
        var commande = {
            nonce: payementid,
            pizzas: cardarr,
            retrait: date_retrait,
            message: message,
            location: this.location
        };
        return this.sendToServer("/api/client/commande", "post", commande);
    };
    WSProvider.prototype.sendGetToServer = function (url, datas) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        console.log("Authoticate: " + this.auth_token);
        if (this.auth_token) {
            headers.append('Authorization', this.auth_token); // also tried other types to test if its working with other types, but no luck
        }
        return this._http.get(this.SERVER_URL + url, { headers: headers }).toPromise().then(function (dt) {
            var d = dt.json();
            console.log(d);
            if (!d)
                throw ("no datas");
            return d;
        });
    };
    WSProvider.prototype.sendToServer = function (url, method, datas) {
        var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        console.log("Authoticate: " + this.auth_token);
        if (this.auth_token) {
            headers.append('Authorization', this.auth_token); // also tried other types to test if its working with other types, but no luck
        }
        return this._http.post(this.SERVER_URL + url, datas || {}, { headers: headers }).toPromise().then(function (dt) {
            var d = dt.json();
            if (!d)
                throw ("no datas");
            return d;
        });
    };
    return WSProvider;
}());
WSProvider = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], WSProvider);
exports.WSProvider = WSProvider;
//# sourceMappingURL=data:application/json;base64,